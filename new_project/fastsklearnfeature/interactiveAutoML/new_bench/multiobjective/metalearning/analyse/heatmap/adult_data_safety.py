import numpy as np
import seaborn as sns; sns.set()
import matplotlib.pyplot as plt
import pandas as pd

import matplotlib as mpl

from fastsklearnfeature.interactiveAutoML.new_bench.multiobjective.metalearning.analyse.heatmap.heatmap_util import pivot2latex


mappnames = {1:'var',
			 2: 'chi2',
			 3:'FCBF',
			 4: 'Fisher score',
			 5: 'mutual_info_classif',
			 6: 'MCFS',
			 7: 'ReliefF',
			 8: 'TPE',
             9: 'simulated_annealing',
			 10: 'NSGA-II',
			 11: 'exhaustive',
			 12: 'forward_selection',
			 13: 'backward_selection',
			 14: 'forward_floating_selection',
			 15: 'backward_floating_selection',
			 16: 'recursive_feature_elimination'
			 }



data = {(0.7, 0.5): (19.5039279460907, 1), (0.7, 0.55): (27.108858466148376, 1), (0.7, 0.6000000000000001): (42.081183433532715, 1), (0.7, 0.6500000000000001): (96.57226312160492, 1), (0.7, 0.7000000000000002): (33.57485747337341, 1), (0.7, 0.7500000000000002): (81.16766202449799, 1), (0.7, 0.8000000000000003): (25.68763518333435, 1), (0.7, 0.8500000000000003): (132.50546944141388, 1), (0.7, 0.9000000000000004): (58.324503898620605, 1), (0.7, 0.9500000000000004): (155.13382613658905, 1), (0.7, 1.0000000000000004): (540.5110580921173, 1), (0.721, 0.5): (29.45109486579895, 1), (0.721, 0.55): (20.81581449508667, 1), (0.721, 0.6000000000000001): (39.181692719459534, 1), (0.721, 0.6500000000000001): (53.110511302948, 1), (0.721, 0.7000000000000002): (26.674953937530518, 1), (0.721, 0.7500000000000002): (27.11694586277008, 1), (0.721, 0.8000000000000003): (37.845078468322754, 1), (0.721, 0.8500000000000003): (33.21441090106964, 1), (0.721, 0.9000000000000004): (85.03823268413544, 1), (0.721, 0.9500000000000004): (300.79376792907715, 1), (0.721, 1.0000000000000004): (64.54520153999329, 1), (0.742, 0.5): (34.387396931648254, 1), (0.742, 0.55): (18.387917399406433, 1), (0.742, 0.6000000000000001): (48.48244547843933, 1), (0.742, 0.6500000000000001): (58.8319411277771, 1), (0.742, 0.7000000000000002): (58.62544631958008, 1), (0.742, 0.7500000000000002): (46.117191672325134, 1), (0.742, 0.8000000000000003): (19.258623838424683, 1), (0.742, 0.8500000000000003): (20.55543351173401, 1), (0.742, 0.9000000000000004): (37.658647656440735, 1), (0.742, 0.9500000000000004): (337.3455375432968, 1), (0.742, 1.0000000000000004): (472.6477427482605, 1), (0.763, 0.5): (47.14334332942963, 1), (0.763, 0.55): (59.78466749191284, 1), (0.763, 0.6000000000000001): (20.461567401885986, 1), (0.763, 0.6500000000000001): (47.92311501502991, 1), (0.763, 0.7000000000000002): (55.46247911453247, 1), (0.763, 0.7500000000000002): (47.861770033836365, 1), (0.763, 0.8000000000000003): (32.858837962150574, 1), (0.763, 0.8500000000000003): (93.720144033432, 1), (0.763, 0.9000000000000004): (72.5339605808258, 1), (0.763, 0.9500000000000004): (191.31420481204987, 1), (0.784, 0.5): (35.946709752082825, 1), (0.784, 0.55): (74.40496563911438, 1), (0.784, 0.6000000000000001): (39.12529015541077, 1), (0.784, 0.6500000000000001): (26.045515656471252, 1), (0.784, 0.7000000000000002): (62.93570804595947, 1), (0.784, 0.7500000000000002): (140.38675498962402, 1), (0.784, 0.8000000000000003): (66.46836984157562, 1), (0.784, 0.8500000000000003): (64.0660730600357, 1), (0.784, 0.9000000000000004): (322.07037103176117, 1), (0.784, 0.9500000000000004): (422.74020051956177, 1), (0.805, 0.5): (20.123424649238586, 1), (0.805, 0.55): (42.022565722465515, 1), (0.805, 0.6000000000000001): (46.47037410736084, 1), (0.805, 0.6500000000000001): (20.926553606987, 1), (0.805, 0.7000000000000002): (34.31130576133728, 1), (0.805, 0.7500000000000002): (61.237743616104126, 1), (0.805, 0.8000000000000003): (64.10107159614563, 1), (0.805, 0.8500000000000003): (125.05697190761566, 1), (0.805, 0.9000000000000004): (110.43296015262604, 1), (0.8260000000000001, 0.5): (19.096741557121277, 1), (0.8260000000000001, 0.55): (26.46209168434143, 1), (0.8260000000000001, 0.6000000000000001): (45.247976541519165, 1), (0.8260000000000001, 0.6500000000000001): (55.21886849403381, 1), (0.8260000000000001, 0.7000000000000002): (92.11592853069305, 1), (0.8260000000000001, 0.7500000000000002): (39.1656938791275, 1), (0.8260000000000001, 0.8000000000000003): (82.16730725765228, 1), (0.8260000000000001, 0.8500000000000003): (52.791043400764465, 1), (0.8260000000000001, 0.9000000000000004): (402.5064688920975, 1), (0.8470000000000001, 0.5): (25.243892669677734, 1), (0.8470000000000001, 0.55): (41.62406015396118, 1), (0.8470000000000001, 0.6000000000000001): (90.3835779428482, 1), (0.8470000000000001, 0.6500000000000001): (64.98695981502533, 1), (0.8470000000000001, 0.7000000000000002): (20.413476705551147, 1), (0.8470000000000001, 0.7500000000000002): (75.47997891902924, 1), (0.8470000000000001, 0.8000000000000003): (118.38790953159332, 1), (0.8470000000000001, 0.8500000000000003): (65.91357958316803, 1), (0.8680000000000001, 0.5): (21.547070145606995, 1), (0.8680000000000001, 0.55): (207.27080965042114, 1), (0.8680000000000001, 0.6000000000000001): (263.861931681633, 1), (0.8890000000000001, 0.5): (45.73409986495972, 1), (0.8890000000000001, 0.55): (85.49511313438416, 2)}

accuracies = []
safety = []
strategy= []
searchtime = []






for k,v in data.items():
	accuracies.append(round(k[0], 2))
	safety.append(round(k[1], 2))
	searchtime.append(round(v[0], 2))
	strategy.append(v[1])


df = pd.DataFrame({'Minimum Accuracy': accuracies, 'Minimum Safety': safety, 'Search time': searchtime, 'Fastest Strategy': strategy})


ax = sns.heatmap(df.pivot("Minimum Accuracy", "Minimum Safety", "Search time"))
plt.show()

print(len(np.unique(strategy)))
print(np.unique(strategy))

#current_palette = sns.color_palette(palette='dark', n_colors=len(np.unique(strategy)))
current_palette = sns.color_palette(palette='colorblind', n_colors=len(np.unique(strategy)))
#current_palette = sns.palplot(sns.color_palette("hls",7))

#https://colorbrewer2.org/#type=qualitative&scheme=Set1&n=7
flatui =['#e41a1c','#377eb8','#4daf4a','#984ea3']


fig, ax = plt.subplots(figsize=(3.5, 3.5))
my_pivot = df.pivot("Minimum Accuracy", "Minimum Safety", 'Fastest Strategy')
my_pivot.sort_index(level=0, ascending=False, inplace=True)
#my_pivot.sort_index(axis=1, ascending=False, inplace=True)
print(my_pivot)


pivot2latex(my_pivot)

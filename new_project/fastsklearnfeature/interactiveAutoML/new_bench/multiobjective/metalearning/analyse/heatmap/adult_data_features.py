import numpy as np
import seaborn as sns; sns.set()
import matplotlib.pyplot as plt
import pandas as pd

import matplotlib as mpl

from fastsklearnfeature.interactiveAutoML.new_bench.multiobjective.metalearning.analyse.heatmap.heatmap_util import pivot2latex


mappnames = {1:'var',
			 2: 'chi2',
			 3:'FCBF',
			 4: 'Fisher score',
			 5: 'mutual_info_classif',
			 6: 'MCFS',
			 7: 'ReliefF',
			 8: 'TPE',
             9: 'simulated_annealing',
			 10: 'NSGA-II',
			 11: 'exhaustive',
			 12: 'forward_selection',
			 13: 'backward_selection',
			 14: 'forward_floating_selection',
			 15: 'backward_floating_selection',
			 16: 'recursive_feature_elimination'
			 }





data = {(0.7, 0.018691588785046728): (5.40496826171875, 1), (0.7, 0.11682242990654206): (10.043293118476868, 1), (0.7, 0.21495327102803738): (11.306503057479858, 1), (0.7, 0.3130841121495327): (11.358354449272156, 1), (0.7, 0.411214953271028): (10.863707900047302, 1), (0.7, 0.5093457943925234): (11.832162022590637, 1), (0.7, 0.6074766355140186): (11.922909617424011, 1), (0.7, 0.705607476635514): (13.89710021018982, 1), (0.7, 0.8037383177570093): (13.533277153968811, 1), (0.7, 0.9018691588785046): (13.13735294342041, 1), (0.7, 1.0): (13.181723833084106, 1), (0.7, 1.0981308411214954): (12.79281997680664, 1), (0.721, 0.018691588785046728): (5.501140832901001, 1), (0.721, 0.11682242990654206): (10.09455144405365, 1), (0.721, 0.21495327102803738): (10.48658573627472, 1), (0.721, 0.3130841121495327): (12.03632140159607, 1), (0.721, 0.411214953271028): (11.627554655075073, 1), (0.721, 0.5093457943925234): (12.569816946983337, 1), (0.721, 0.6074766355140186): (11.77077841758728, 1), (0.721, 0.705607476635514): (11.990527033805847, 1), (0.721, 0.8037383177570093): (12.596004247665405, 1), (0.721, 0.9018691588785046): (13.23829472064972, 1), (0.721, 1.0): (13.06794023513794, 1), (0.721, 1.0981308411214954): (12.872734904289246, 1), (0.742, 0.018691588785046728): (5.573534250259399, 1), (0.742, 0.11682242990654206): (11.039961576461792, 1), (0.742, 0.21495327102803738): (11.183576226234436, 1), (0.742, 0.3130841121495327): (10.75062096118927, 1), (0.742, 0.411214953271028): (11.831786513328552, 1), (0.742, 0.5093457943925234): (11.844934463500977, 1), (0.742, 0.6074766355140186): (9.527121305465698, 1), (0.742, 0.705607476635514): (12.268092513084412, 1), (0.742, 0.8037383177570093): (11.552843689918518, 1), (0.742, 0.9018691588785046): (11.17596960067749, 1), (0.742, 1.0): (11.788330078125, 1), (0.742, 1.0981308411214954): (13.237431526184082, 1), (0.763, 0.11682242990654206): (9.813383340835571, 1), (0.763, 0.21495327102803738): (10.763571977615356, 1), (0.763, 0.3130841121495327): (11.063608765602112, 1), (0.763, 0.411214953271028): (11.764221549034119, 1), (0.763, 0.5093457943925234): (11.198705077171326, 1), (0.763, 0.6074766355140186): (11.7713223695755, 1), (0.763, 0.705607476635514): (11.703254699707031, 1), (0.763, 0.8037383177570093): (13.589894652366638, 1), (0.763, 0.9018691588785046): (11.052414178848267, 1), (0.763, 1.0): (13.141717195510864, 1), (0.763, 1.0981308411214954): (12.782572746276855, 1), (0.784, 0.11682242990654206): (26.234989404678345, 1), (0.784, 0.21495327102803738): (9.886885166168213, 1), (0.784, 0.3130841121495327): (21.55935287475586, 1), (0.784, 0.411214953271028): (11.401241064071655, 1), (0.784, 0.5093457943925234): (12.688442349433899, 1), (0.784, 0.6074766355140186): (12.091842293739319, 1), (0.784, 0.705607476635514): (13.021296858787537, 1), (0.784, 0.8037383177570093): (12.3783677816391, 1), (0.784, 0.9018691588785046): (13.560624122619629, 1), (0.784, 1.0): (12.238356947898865, 1), (0.784, 1.0981308411214954): (15.484183311462402, 1), (0.805, 0.11682242990654206): (10.72044849395752, 1), (0.805, 0.21495327102803738): (16.083587169647217, 1), (0.805, 0.3130841121495327): (12.089479565620422, 1), (0.805, 0.411214953271028): (16.003337264060974, 1), (0.805, 0.5093457943925234): (11.813197016716003, 1), (0.805, 0.6074766355140186): (12.506164073944092, 1), (0.805, 0.705607476635514): (12.532374262809753, 1), (0.805, 0.8037383177570093): (12.450214385986328, 1), (0.805, 0.9018691588785046): (12.069792866706848, 1), (0.805, 1.0): (11.769869804382324, 1), (0.805, 1.0981308411214954): (11.379115343093872, 1), (0.8260000000000001, 0.11682242990654206): (10.867734551429749, 2), (0.8260000000000001, 0.21495327102803738): (11.021507382392883, 1), (0.8260000000000001, 0.3130841121495327): (11.285839200019836, 1), (0.8260000000000001, 0.411214953271028): (12.445024251937866, 1), (0.8260000000000001, 0.5093457943925234): (12.022217035293579, 1), (0.8260000000000001, 0.6074766355140186): (15.632363319396973, 1), (0.8260000000000001, 0.705607476635514): (13.328763842582703, 1), (0.8260000000000001, 0.8037383177570093): (17.40511989593506, 1), (0.8260000000000001, 0.9018691588785046): (12.352055311203003, 1), (0.8260000000000001, 1.0): (12.942703366279602, 1), (0.8260000000000001, 1.0981308411214954): (12.621576070785522, 1), (0.8470000000000001, 0.11682242990654206): (249.8835346698761, 2), (0.8470000000000001, 0.21495327102803738): (60.87436330318451, 1), (0.8470000000000001, 0.3130841121495327): (20.36606526374817, 1), (0.8470000000000001, 0.411214953271028): (20.75072193145752, 1), (0.8470000000000001, 0.5093457943925234): (17.44100797176361, 1), (0.8470000000000001, 0.6074766355140186): (16.619454860687256, 1), (0.8470000000000001, 0.705607476635514): (12.823657274246216, 1), (0.8470000000000001, 0.8037383177570093): (13.086047530174255, 1), (0.8470000000000001, 0.9018691588785046): (10.592903137207031, 1), (0.8470000000000001, 1.0): (12.061962842941284, 1), (0.8470000000000001, 1.0981308411214954): (13.102662324905396, 1), (0.8680000000000001, 0.11682242990654206): (142.17877888679504, 2), (0.8680000000000001, 0.21495327102803738): (16.864397048950195, 2), (0.8680000000000001, 0.3130841121495327): (17.453049659729004, 2), (0.8680000000000001, 0.411214953271028): (213.62560391426086, 1), (0.8680000000000001, 0.5093457943925234): (32.64860558509827, 1), (0.8680000000000001, 0.6074766355140186): (31.944133639335632, 1), (0.8680000000000001, 0.705607476635514): (26.287248730659485, 1), (0.8680000000000001, 0.8037383177570093): (13.00740385055542, 1), (0.8680000000000001, 0.9018691588785046): (13.551890015602112, 1), (0.8680000000000001, 1.0): (20.878938794136047, 1), (0.8680000000000001, 1.0981308411214954): (13.966907858848572, 1), (0.8890000000000001, 0.11682242990654206): (300.31133008003235, 3), (0.8890000000000001, 0.21495327102803738): (21.922547459602356, 3), (0.8890000000000001, 0.3130841121495327): (61.50211000442505, 2), (0.8890000000000001, 0.411214953271028): (42.17336297035217, 2), (0.8890000000000001, 0.5093457943925234): (12.065626859664917, 2), (0.8890000000000001, 0.6074766355140186): (138.08329951763153, 1), (0.8890000000000001, 0.705607476635514): (147.5198793411255, 1), (0.8890000000000001, 0.8037383177570093): (35.52476131916046, 1), (0.8890000000000001, 0.9018691588785046): (13.662779331207275, 1), (0.8890000000000001, 1.0): (31.394772052764893, 1)}

accuracies = []
max_number_features = []
strategy= []
searchtime = []

map_real_id_to_unique = {}
map_unique_to_name = {}




for k,v in data.items():
	if k[1] <= 1.0:
		accuracies.append(round(k[0], 2))
		max_number_features.append(round(k[1], 2))
		searchtime.append(round(v[0], 2))
		strategy.append(v[1])

print(map_unique_to_name)

df = pd.DataFrame({'Minimum Accuracy': accuracies, 'Maximum Features': max_number_features, 'Search time': searchtime, 'Fastest Strategy': strategy})


ax = sns.heatmap(df.pivot("Minimum Accuracy", "Maximum Features", "Search time"))
plt.show()

print(len(np.unique(strategy)))
print(np.unique(strategy))

#current_palette = sns.color_palette(palette='dark', n_colors=len(np.unique(strategy)))
current_palette = sns.color_palette(palette='colorblind', n_colors=len(np.unique(strategy)))
#current_palette = sns.palplot(sns.color_palette("hls",7))

#https://colorbrewer2.org/#type=qualitative&scheme=Set1&n=7
flatui =['#e41a1c','#377eb8','#4daf4a','#984ea3']
current_palette = sns.color_palette(flatui)

#sns.palplot(current_palette)


fig, ax = plt.subplots(figsize=(3.5, 3.5))
my_pivot = df.pivot("Minimum Accuracy", "Maximum Features", 'Fastest Strategy')
my_pivot.sort_index(level=0, ascending=False, inplace=True)
my_pivot.sort_index(axis=1, ascending=False, inplace=True)
print(my_pivot)
sns.heatmap(my_pivot, cbar=False, cmap=current_palette, ax=ax)

print(my_pivot.values)
print(my_pivot.axes)




pivot2latex(my_pivot)
import pickle
from fastsklearnfeature.candidates.CandidateFeature import CandidateFeature
from typing import List, Dict, Set


all_combos = pickle.load(open('/tmp/all_fds.p', "rb"))

results = [0.6792857142857145, 0.6821428571428572, 0.6683333333333332, 0.6735714285714286, 0.677142857142857, 0.6897619047619047, 0.6785714285714285, 0.6764285714285714, 0.6757142857142858, 0.6664285714285715, 0.6685714285714285, 0.6764285714285714, 0.6783333333333333, 0.6852380952380953, 0.6692857142857143, 0.678095238095238, 0.680952380952381, 0.6742857142857143, 0.6735714285714287, 0.6204761904761905, 0.5995238095238096, 0.6697619047619047, 0.6899999999999998, 0.6899999999999998, 0.6826190476190476, 0.6826190476190476, 0.6757142857142856, 0.6757142857142856, 0.6238095238095237, 0.6685714285714285, 0.680952380952381, 0.6799999999999999, 0.6814285714285715, 0.6814285714285715, 0.6735714285714286, 0.6626190476190477, 0.6735714285714286, 0.6576190476190475, 0.6576190476190475, 0.6742857142857144, 0.6926190476190476, 0.6804761904761905, 0.669047619047619, 0.6702380952380953, 0.6783333333333333, 0.6623809523809523, 0.6799999999999999, 0.6783333333333333, 0.6730952380952381, 0.6783333333333333, 0.6642857142857143, 0.6738095238095237, 0.6745238095238095, 0.6835714285714287, 0.6795238095238096, 0.6352380952380952, 0.6473809523809523, 0.680952380952381, 0.6799999999999999, 0.6814285714285715, 0.6814285714285715, 0.6735714285714286, 0.6602380952380953, 0.6735714285714286, 0.6576190476190475, 0.6585714285714286, 0.6742857142857144, 0.6926190476190476, 0.6804761904761905, 0.669047619047619, 0.6702380952380953, 0.6783333333333333, 0.6623809523809523, 0.6799999999999999, 0.6783333333333333, 0.6730952380952381, 0.6783333333333333, 0.6642857142857143, 0.6738095238095237, 0.6745238095238095, 0.6835714285714287, 0.665, 0.6821428571428572, 0.6873809523809524, 0.6635714285714286, 0.6821428571428572, 0.6714285714285713, 0.6628571428571428, 0.6628571428571428, 0.6445238095238095, 0.6445238095238095, 0.680952380952381, 0.6778571428571428, 0.675, 0.6645238095238095, 0.6790476190476191, 0.681904761904762, 0.6769047619047619, 0.6778571428571428, 0.6914285714285715]

def sum_complexity(combo: List[CandidateFeature]):
	my_sum = 0
	for c in combo:
		my_sum += c.get_complexity()
	return my_sum

def averageScore(combo: List[CandidateFeature]):
	my_sum = 0
	for c in combo:
		my_sum += c.runtime_properties['score']
	return my_sum / float(len(combo))

def get_raw_features(combo: List[CandidateFeature]):
	my_sum = set()
	for c in combo:
		my_sum = my_sum.union(set(c.get_raw_attributes()))
	return len(my_sum)

def get_dimensions(combo: List[CandidateFeature]):
	my_sum = 0
	for c in combo:
		my_sum += len(str(c).split(','))
	return my_sum

complexities = []
avg_scores = []
raw_features = []
dimensions = []

for i in range(len(results)):
	complexities.append(sum_complexity(all_combos[i]))
	avg_scores.append(averageScore(all_combos[i]))
	raw_features.append(get_raw_features(all_combos[i]))
	dimensions.append(get_dimensions(all_combos[i]))


import matplotlib.pyplot as plt

plt.subplot(1, 4, 1)
plt.scatter(complexities, results)
plt.title('sum complexity')

plt.subplot(1, 4, 2)
plt.scatter(avg_scores, results)
plt.title('avg AUC')

plt.subplot(1, 4, 3)
plt.scatter(raw_features, results)
plt.title('number of raw features')

plt.subplot(1, 4, 4)
plt.scatter(dimensions, results)
plt.title('number of dimensions')

plt.show()